name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.19.0

      - name: Install dependencies
        run: pnpm install

      - name: Generate Prisma client
        run: pnpm db:generate

      - name: Build application
        run: pnpm build

      - name: Create deployment directory
        run: mkdir -p deployment

      - name: Copy deployment files
        run: |
          cp -r dist deployment/
          cp -r prisma deployment/
          cp -r scripts deployment/
          cp appspec.yml deployment/
          cp package.json deployment/
          cp pnpm-lock.yaml deployment/

      - name: Create deployment archive
        run: |
          cd deployment
          zip -r ../tecno-backend-${{ github.sha }}.zip .
          cd ..

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload artifact to S3
        run: |
          aws s3 cp tecno-backend-${{ github.sha }}.zip \
            s3://${{ secrets.S3_BUCKET }}/tecno-backend-${{ github.sha }}.zip

      - name: Trigger CodeDeploy deployment
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name ${{ secrets.CODEDEPLOY_APPLICATION }} \
            --deployment-group-name ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP }} \
            --s3-location bucket=${{ secrets.S3_BUCKET }},key=tecno-backend-${{ github.sha }}.zip,bundleType=zip \
            --description "Deployment from commit ${{ github.sha }}" \
            --query 'deploymentId' \
            --output text)
          
          echo "Deployment ID: $DEPLOYMENT_ID"
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV

      - name: Wait for deployment completion
        run: |
          echo "Waiting for deployment ${{ env.DEPLOYMENT_ID }} to complete..."
          
          aws deploy wait deployment-successful \
            --deployment-id ${{ env.DEPLOYMENT_ID }} \
            && echo "Deployment completed successfully!" \
            || (echo "Deployment failed!" && exit 1)
