generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  firebaseId  String @unique
  firstName   String
  middleName  String @default("")
  lastName    String
  username    String @unique
  email       String @unique
  phoneNumber String

  collegeName    String
  registrationId String?
  hostelName     String?
  imageUrl       String

  hasOpted Boolean @default(false)

  teamsRegistered TeamRegistration[]
  payments        PaymentTransaction[] @relation("PayerRelation")

  organizes EventOrganiser[]

  merchOrders MerchOrder[]
}

model EventOrganiser {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model Team {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  teamName String? // optional team name for solo participants

  registrationStatus RegistrationStatus

  members  TeamRegistration[]
  payments PaymentTransaction[] @relation("TeamPayments")

  extraInformation Json[]

  eventId String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model TeamRegistration {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  registrationStatus RegistrationStatus
  role               TeamMemberRole

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  teamId String @db.ObjectId
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

enum RegistrationStatus {
  REGISTERED
  PENDING
  CANCELLED
}

enum TeamMemberRole {
  LEADER
  MEMBER
}

model Module {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  description String?

  iconImage  String
  coverImage String

  thirdPartyURL String?

  events Event[]
}

model Event {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  posterImage String

  thirdPartyURL String?

  maxTeamSize Int
  minTeamSize Int

  prizeDescription  String?
  stagesDescription String?
  description       String?

  venue String

  // Payment related fields
  registrationFee   Float   @default(0)
  isPaymentRequired Boolean @default(false)

  // Bank account details for receiving payments
  accountHolderName String?
  accountNumber     String?
  ifscCode          String?
  bankName          String?
  upiId             String?

  organizers EventOrganiser[]

  registrationStartTime DateTime
  registrationEndTime   DateTime

  extraQuestions Json[] @default([])

  moduleId String @db.ObjectId
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  teams    Team[]
  payments PaymentTransaction[]
}

model Statics {
  name String @id @map("_id")
  json Json
}

enum TshirtSize {
  XS
  S
  M
  L
  XL
  XXL
}

model SparkTshirt {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String     @unique
  scholarId      String?
  isNITS         String
  mobileNumber   String     @unique
  hostelName     String?
  address        String?
  tshirtSize     TshirtSize
  paymentReceipt String
  transactionId  String     @unique
}

enum MerchType {
  Tecnoesis
  Spark
}

model MerchOrder {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type     MerchType
  size     TshirtSize
  quantity Int        @default(1)

  createdAt DateTime @default(now())

  @@unique([userId, type])
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

model PaymentTransaction {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  amount   Float
  currency String @default("INR")

  orderId   String  @unique // Cashfree order ID
  paymentId String? @unique // Cashfree payment ID after successful payment

  status PaymentStatus @default(PENDING)

  eventId String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  teamId String? @db.ObjectId
  team   Team?   @relation("TeamPayments", fields: [teamId], references: [id], onDelete: Cascade)

  payerId String @db.ObjectId // The user who made the payment (team leader)
  payer   User   @relation("PayerRelation", fields: [payerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  paymentData Json? // Store additional payment details
}
