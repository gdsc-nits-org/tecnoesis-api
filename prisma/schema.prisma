generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  firebaseId  String @unique
  firstName   String
  middleName  String @default("")
  lastName    String
  username    String @unique
  email       String @unique
  phoneNumber String

  collegeName    String
  registrationId String?
  hostelName     String?
  imageUrl       String

  hasOpted Boolean @default(false)

  teamsRegistered TeamRegistration[]

  organizes EventOrganiser[]

  merchOrders MerchOrder[]
}

model EventOrganiser {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model Team {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  teamName String? // optional team name for solo participants

  registrationStatus RegistrationStatus

  members TeamRegistration[]

  extraInformation Json[]

  // Payment verification fields
  transactionId     String?
  verificationPhoto String? // URL to uploaded payment verification photo

  eventId String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model TeamRegistration {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  registrationStatus RegistrationStatus
  role               TeamMemberRole

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  teamId String @db.ObjectId
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

enum RegistrationStatus {
  REGISTERED
  PENDING
  CANCELLED
}

enum TeamMemberRole {
  LEADER
  MEMBER
}

model Module {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  description String?

  iconImage  String
  coverImage String

  thirdPartyURL String?

  events Event[]
}

model Event {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  posterImage String

  thirdPartyURL String?

  maxTeamSize Int
  minTeamSize Int

  prizeDescription  String?
  stagesDescription String?
  description       String?

  venue String

  // Payment related fields
  registrationFee Float   @default(0)
  upiQrCode       String? // UPI QR code for payment

  organizers EventOrganiser[]

  registrationStartTime DateTime
  registrationEndTime   DateTime

  moduleId String @db.ObjectId
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  teams Team[]
}

model Statics {
  name String @id @map("_id")
  json Json
}

enum TshirtSize {
  XS
  S
  M
  L
  XL
  XXL
}

model SparkTshirt {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String     @unique
  scholarId      String?
  isNITS         String
  mobileNumber   String     @unique
  hostelName     String?
  address        String?
  tshirtSize     TshirtSize
  paymentReceipt String
  transactionId  String     @unique
}

enum MerchType {
  Tecnoesis
  Spark
}

model MerchOrder {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type     MerchType
  size     TshirtSize
  quantity Int        @default(1)

  createdAt DateTime @default(now())

  @@unique([userId, type])
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}
